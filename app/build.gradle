plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

Properties properties = new Properties()
if (rootProject.file("local.properties").exists()) {
    properties.load(rootProject.file("local.properties").newDataInputStream())
}

def apiKey = properties.getProperty("API_KEY") ?: ""
def baseUrl = properties.getProperty("BASE_URL") ?: ""
def imageURL = properties.getProperty("IMAGE_URL") ?: ""

android {
    namespace(AppVersions.APPLICATION_ID)
    compileSdk(AppVersions.COMPILE_SDK)

    defaultConfig {
        applicationId = (AppVersions.APPLICATION_ID)
        minSdk = (AppVersions.MIN_SDK)
        targetSdk = (AppVersions.TARGET_SDK)
        versionCode = AppVersions.versionCode
        versionName = AppVersions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        vectorDrawables.useSupportLibrary = true

        buildConfigField("String", "API_KEY", apiKey)
        buildConfigField("String", "BASE_URL", baseUrl)
        buildConfigField("String", "IMAGE_URL", imageURL)
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    //kotlin
    implementation "androidx.core:core-ktx:${Kotlin.KTX_CORE_VERSION}"

    //lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${Androidx.lifecycle}"

    //compose
    implementation "androidx.activity:activity-compose:${Androidx.activityComposeVersion}"
    implementation "androidx.compose.ui:ui:${Androidx.composeVersion}"
    implementation "androidx.compose.ui:ui-tooling-preview:${Androidx.composeVersion}"

    //material
    implementation "androidx.compose.material:material:${Androidx.material}"
    implementation "androidx.compose.material3:material3:${Androidx.material3}"

    //viewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:${Androidx.lifecycleViewModel}"

    //Google accompanist permissions
    implementation "com.google.accompanist:accompanist-permissions:${Accompanist.version}"

    //coil
    implementation "io.coil-kt:coil-compose:${Coil.version}"

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:${Networking.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${Networking.gson}"
    implementation "com.squareup.okhttp3:logging-interceptor:${Networking.logging}"

    //Hilt dependency injection
    implementation "com.google.dagger:hilt-android:${Di.hiltVersion}"
    kapt "com.google.dagger:hilt-android-compiler:${Di.hiltVersion}"

    //testing
    testImplementation "junit:junit:${UnitTesting.junit}"
    androidTestImplementation "androidx.test.ext:junit:${UnitTesting.junit_Ext}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${UnitTesting.espresso}"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:${UnitTesting.COMPOSE_TEST_VERSION}"
    debugImplementation "androidx.compose.ui:ui-tooling:${UnitTesting.COMPOSE_TEST_VERSION}"
    debugImplementation "androidx.compose.ui:ui-test-manifest:${UnitTesting.COMPOSE_TEST_VERSION}"

    //mockito testing
    testImplementation "org.mockito:mockito-core:${UnitTesting.MOCKITO_CORE}"
    testImplementation "org.mockito:mockito-inline:${UnitTesting.MOCKITO_INLINE}"
    testImplementation "org.mockito:mockito-android:${UnitTesting.MOCKITO_ANDROID}"
    testImplementation "androidx.arch.core:core-testing:${UnitTesting.ARCH_CORE}"
    implementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${UnitTesting.MOCKITO_KOTLIN}"
    implementation "com.squareup.retrofit2:retrofit-mock:${UnitTesting.MOCK_RETROFIT}"
}